#!/usr/bin/env ts-node

import { writeFileSync, existsSync, mkdirSync } from "fs";
import { resolve, join } from "path";
import { DEPLOYMENT_ADDRESSES, ChainId } from "@carrot-kpi/contracts";

interface ChainConfig {
    Factory: {
        address: string;
        startBlock: number;
    };
    KPITokensManager: {
        address: string;
        startBlock: number;
    };
    OraclesManager: {
        address: string;
        startBlock: number;
    };
}

const NETWORK_NAMES: Record<ChainId, string> = {
    [ChainId.Sepolia]: "sepolia",
    [ChainId.ArbitrumSepolia]: "arbitrum-sepolia",
};

const networksJSON = Object.entries(DEPLOYMENT_ADDRESSES).reduce(
    (accumulator, [chain, contracts]) => {
        accumulator[NETWORK_NAMES[Number(chain) as ChainId]] = {
            Factory: {
                address: contracts.factory.address,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                startBlock: contracts.factory.blockCreated!,
            },
            KPITokensManager: {
                address: contracts.kpiTokensManager.address,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                startBlock: contracts.kpiTokensManager.blockCreated!,
            },
            OraclesManager: {
                address: contracts.oraclesManager.address,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                startBlock: contracts.oraclesManager.blockCreated!,
            },
        };
        return accumulator;
    },
    {} as Record<string, ChainConfig>,
);

const networksTS = Object.entries(DEPLOYMENT_ADDRESSES).reduce(
    (accumulator, [chain, contracts]) => {
        const networkName = NETWORK_NAMES[Number(chain) as ChainId]
            .toUpperCase()
            .replace("-", "_");
        accumulator += `export const ${networkName}_FACTORY_ADDRESS: Bytes = Bytes.fromHexString("${contracts.factory.address}");\n`;
        accumulator += `export const ${networkName}_KPI_TOKENS_MANAGER_ADDRESS: Bytes = Bytes.fromHexString("${contracts.kpiTokensManager.address}");\n`;
        accumulator += `export const ${networkName}_ORACLES_MANAGER_ADDRESS: Bytes = Bytes.fromHexString("${contracts.oraclesManager.address}");\n\n`;
        return accumulator;
    },
    '// this file is automatically generated by the generate-network-files\n// script, do not edit this manually\n\nimport { Bytes } from "@graphprotocol/graph-ts";\n\n',
);

try {
    writeFileSync(
        resolve("networks.json"),
        JSON.stringify(networksJSON, null, 4),
    );

    const GEN_DIR = resolve("src/gen");
    if (!existsSync(GEN_DIR)) {
        mkdirSync(GEN_DIR);
    }

    writeFileSync(join(GEN_DIR, "networks.ts"), networksTS);
    console.log("networks json file successfully generated");
} catch (error) {
    console.error("error while generating networks json file", error);
}
